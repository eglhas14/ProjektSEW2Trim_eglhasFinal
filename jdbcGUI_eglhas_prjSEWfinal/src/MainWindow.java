
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author eglhas14
 */
public class MainWindow extends javax.swing.JFrame {
    
    
    // Variablen fuer die Verbindung, Datenbankdaten, primaerschluesseln erstellen
    Connection con = null;
    DatabaseMetaData md = null;

    String primary_key = null;
    int pkPosition = 0;
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();

        try {
            
            // MySQL Treiber laden
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println("Could not load mysql driver!");
            javax.swing.JOptionPane.showMessageDialog(this, "Error loading MySQL Driver");
           
            System.exit(1);
        }
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblServer = new javax.swing.JLabel();
        lblPort = new javax.swing.JLabel();
        txtServer = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        btnDisconnect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEntries = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblServer.setText("Server:");
        lblServer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblServerMouseEntered(evt);
            }
        });

        lblPort.setText("Port: ");

        txtServer.setText("localhost");

        txtPort.setText("8080");
        txtPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPortActionPerformed(evt);
            }
        });

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        btnDisconnect.setText("Disconnect");
        btnDisconnect.setEnabled(false);
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        tblEntries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblEntries);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblServer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtServer, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPort)
                                .addGap(18, 18, 18)
                                .addComponent(txtPort)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDisconnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblServer)
                    .addComponent(txtServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPort)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDisconnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPortActionPerformed
    }//GEN-LAST:event_txtPortActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        try {
            
            
            //Verbindung mit der Datenbank erstellen (durch das Input vom Benutzer) 
            con = DriverManager.getConnection("jdbc:mysql://" + txtServer.getText() + ":8080/world", "root", "");
            //Nachdem es auf den Connect button gedruckt haben soll diese zusammen mit die Text Felder 
            //blockiert werden. Erst dann wenn der Disconnect button gedruckt ist werden sie auf true gesetzt. 
            
            btnConnect.setEnabled(false);
            txtServer.setEnabled(false);
            btnDisconnect.setEnabled(true);
            //getMetaData gibt das Objekt von ResultSetMetaData zur√ºck
            // Also hier holen wir uns die Datenbank Daten. 
            md = con.getMetaData();
            
            
            // Unten folgt das Speichern von Primary Keys in der Tabelle City in einem ResultSet
            ResultSet res_prim = md.getPrimaryKeys(null, null, "city");

            res_prim.next(); //  next() : sucht nach den 
            // folgenden Primary Keys
            
            
            primary_key = res_prim.getString(4);
            pkPosition =res_prim.getInt("KEY_SEQ")-1;
            System.out.println("pkpos"+pkPosition); // Position unseres Primary Keys rausholen
            System.out.println("primary key: " + res_prim.getString(4));
            

            // Zeilen aus den City Tabelle rausnehmen
            ResultSet res
                    = md.getColumns(null, null, "city", null);
            // Diese Zeilen in einer Tabelle setzen. 
            // Dafuer wird uns die Klasse OurTableModel dienen. 
            OurTableModel tableModel = 
                    new OurTableModel(pkPosition);
           
           
            int num_cols = 0; //Variable fuer die Anzahl der Zeilen 
            
            //Schleife zaehlt durch, solange auf res Daten gibt. 
            while (res.next()) {
                
                // Addiere Spalten auf die Tabelle je 4 Datensaetzen
                tableModel.addColumn(res.getString(4));
                
                //Anzahl der Columns erhoehen,
                num_cols++;
            }
            
            // Statement erzeugen 
            Statement stmt = con.createStatement();
            
            // ExecuteQuery : um die SQL 
            // SELECT-Anweisung auszuf√ºhren und ein ResultSet in res zur√ºckzugeben
            res = stmt.executeQuery("SELECT * FROM city"); // wir selektieren alles von der 
            // tabelle city 

            while (res.next()) {
                Object[] arr = new Object[num_cols];

                // jedes element aus res.next() im array speichern
                for (int i = 0; i < num_cols; i++) {
                    arr[i] = res.getObject(i + 1);
                }
                tableModel.addRow(arr);
            }
            
            // eine Tabelle erstellen mit unserem array in dem wir jedes element aus res.next gespeichert haben
            tableModel.addRow(new Object[num_cols]);
            
            // SetModel legt das Datenmodell f√ºr diese Tabelle auf newModel fest und 
            //registriert es f√ºr Listener-Benachrichtigungen aus dem neuen Datenmodell.
            tblEntries.setModel(tableModel);
            
            
            //TableModelListener definiert die Schnittstelle f√ºr
            // ein Objekt, das √Ñnderungen in einem TableModel √ºberwacht.
            // Wir registrieren was mit der Tabelle passiert.
            tableModel.addTableModelListener(new TableModelListener() {
                @Override
                public void tableChanged(TableModelEvent e) {
                    tableModelChanged(e); // Tabellen veraendert, also es wurde auf die Datensaetzen etwas
                    // geaendert 
                } } );
            
            
        } catch (SQLException ex) {
            
            // Exception ausloesen wenn die Verbindung nicht erfolgreich ist.
            System.out.println("Could not connect to world database!");
            javax.swing.JOptionPane.showMessageDialog(this, "Error connecting to database!");
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    
    //Methode fuer die Registrierung der Veraenderungen auf die Tabelle.
    private void tableModelChanged(TableModelEvent e) {
        
        
        
        System.out.println("table changed");
        
        // Erste Zeile in einer Variable speichern
        int row = e.getFirstRow();
        
        // Spaltenname in einer String speichern
        String columnName = 
         tblEntries.getModel().getColumnName(e.getColumn());
        
        
        // ID rausholen und in einer Variable speichern
        int id = Integer.parseInt(tblEntries.getModel().getValueAt(row, pkPosition).toString());
          System.out.println(columnName +" " +  id);
        
          
        // Die veraenderte Datensatz/Zeile rausnehmen und in einer Variable speichern. 
        String entry_changed = 
                tblEntries.getModel().getValueAt(row, e.getColumn()).toString();  
        try {
            
            // Ein Objekt der Typ PreparedStatement initialisieren.
            PreparedStatement update =
                    con.prepareStatement( // Die Tabelle city andern/updaten nach dem user input 
                            "UPDATE city SET "+ columnName + "= ? WHERE " + primary_key + " = ?");
            
            // Den Objekt die geaenderte Datensaetze hineinfuegen
            update.setString(1, entry_changed);
            update.setInt(2, id);
            
            System.out.println(update); // Die update drucken. 
            
            // F√ºhrt die angegebene SQL-Anweisung aus. Dies ist in unserem Fall eine  
            // UPDATE Anweisung 
            // die nichts zur√ºckgibt
            //Das drucken wir aus, um zu zeigen welche Zeilen upgedated wurden. 
            System.out.println(update.executeUpdate() + " rows changed"); 
            
        } catch (SQLException ex) {
            System.out.println("Error updating table");
            javax.swing.JOptionPane.showMessageDialog(this, "Error updating table");
        }
          
          
          
    }
    

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
       //Hier folgt die Funktionalitaet der Disconnect Button
        
        
        try {
            
            // Wie der Name schon sagt, duerfen wir hier die Verbindung mit der Datenbank 
            //schliessen. 
            
            
            
            con.close();
            
            // Der Connect Button kann ruhig auf true gesetzt werden d.h nach der Disconnect
            // konnen wir noch einmal die Verbindung zuruecksetzen. 
            btnConnect.setEnabled(true);
            txtServer.setEnabled(true); 
            btnDisconnect.setEnabled(false);

        } catch (SQLException ex) {
            System.out.println("Could not disconnect from world database!");
            javax.swing.JOptionPane.showMessageDialog(this, "Error disconnecting from database!");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void lblServerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblServerMouseEntered
        System.out.println(evt.getX());
        System.out.println("mouse entered on label");        // TODO add your handling code here:
    }//GEN-LAST:event_lblServerMouseEntered

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        
        int row=tblEntries.getSelectedRow(); // Die selektierte Row in einer Variable speichern. 
        
        System.out.println("L√∂schen von der Spalte");
        
        // Es wird uberpruft nach dem Finden von der letzten Zeile die nicht geloscht werden soll. 
         if(row!= tblEntries.getModel().getRowCount()-1){
          
       
            //id rausholen-> in einer Variable speichern
            int id= (int) tblEntries.getModel().getValueAt(row,pkPosition); 
          
            
            try{
                
                
              con = DriverManager.getConnection("jdbc:mysql://" + txtServer.getText() + ":8080/world", "root", "");
             // Zeilen mittels einer PreparedStatement l√∂schen 
            PreparedStatement dlt = con.prepareStatement("DELETE * FROM city WHERE"+primary_key+"=?");
            dlt.setInt(2, id);
                System.out.println(dlt);

            System.out.println(dlt.executeUpdate()+"Rows deleted");
            //Tabelle renew-en
            tblEntries.setModel(new DefaultTableModel());
        }catch(SQLException e){
            System.out.println("Die Zeile konnte nicht geloescht werden");
            
        }
         }
         else{
             System.out.println("");
         }
    
        
        
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblServer;
    private javax.swing.JTable tblEntries;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtServer;
    // End of variables declaration//GEN-END:variables
}
